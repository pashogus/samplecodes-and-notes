Linked list
 add(object)  - add the element at the last
 add(index,object) - add the lement at index and move all other elements to the rigth
 remove() - remove object from head
 remove(index) - remove object from index
 remove(object) - remove the first occurance of object
  set(index,object) - update the object at the index.
 
Array List
 add(object)  - add the element at the last
 add(index,object) - add the lement at index and move all other elements to the rigth
 remove(index) - remove object from index
 remove(object) - remove the first occurance of object
 set(index,object) - update the object at the index.

boolean add(Object element): This method appends the specified element to the end of this list.
Syntax:

boolean add(Object element)

Parameters: This function accepts a single parameter element as shown in the above syntax. The element specified by this parameter is appended to end of the list.

Return Value: This method returns True after execution.

---------------

void add(int index, Object element): This method inserts an element at a specified index in the list. It shifts the element currently at that position (if any) and any subsequent elements to the right (will add one to their indices).

Syntax:

void add(int index, Object element)

Parameters: This method accepts two parameters as described below.

    index: The index at which the specified element is to be inserted.
    element: The element which is needed to be inserted.

Return Value: This method does not return any value.

// creating an empty LinkedList
      LinkedList list = new LinkedList();
  
      // use add() method to add elements in the list
      list.add("Geeks");
      list.add("for");
      list.add("Geeks");
      list.add("10");
      list.add("20");
  
      // Output the present list
      System.out.println("The list is:" + list);
  
      // Adding new elements to the end
      list.add(2, "Hello");   //both in array list and in linked list, adding with indiexes push all the elements to the right
      list.add(4, "End");
  
      // printing the new list
      System.out.println("The new List is:" + list);
   }
}

Output:

The list is:[Geeks, for, Geeks, 10, 20]
The new List is:[Geeks, for, Hello, Geeks, End, 10, 20]


  ArrayList listing = new ArrayList<String>();
       listing.add("shan");
       listing.add("shan1");
       listing.add(0,"shan2");  //both in array list and in linked list, adding with indiexes push all the elements to the right
        listing.add("shan1");
        listing.add("shan1");
        
        
       Iterator itr = listing.iterator();
       while(itr.hasNext())
       {
          System.out.println(itr.next()+" ") ;
       }
       
       System.out.println("----------------") ;
       
       listing.remove("shan1");
       
       Iterator itr1 = listing.iterator();
       while(itr1.hasNext())
       {
          System.out.println(itr1.next()+" ") ;
       }
    }

---------------------

The Java.util.LinkedList.remove() method is used to remove an element from a linked list. The element is removed from the beginning or head of the linked list.

// Creating an empty LinkedList
        LinkedList<String> list = new LinkedList<String>();
  
        // Using add() method to add elements in the list
        list.add("Geeks");
        list.add("for");
        list.add("Geeks");
        list.add("10");
        list.add("20");
  
        // Output the list
        System.out.println("LinkedList:" + list);
  
        // Remove the head using remove()
        list.remove();
  
        // Print the final list
        System.out.println("Final LinkedList:" + list);
    }
}
Output:

LinkedList:[Geeks, for, Geeks, 10, 20]
Final LinkedList:[for, Geeks, 10, 20]

-----------

The Java.util.LinkedList.remove(int index) method is used to remove an element from a linked list from a specific position or index.

// Creating an empty LinkedList
        LinkedList<String> list = new LinkedList<String>();
  
        // Use add() method to add elements in the list
        list.add("Geeks");
        list.add("for");
        list.add("Geeks");
        list.add("10");
        list.add("20");
  
        // Output the list
        System.out.println("LinkedList:" + list);
  
        // Remove the head using remove()
        list.remove(4);
  
        // Print the final list
        System.out.println("Final LinkedList:" + list);
    }
}
Output:

LinkedList:[Geeks, for, Geeks, 10, 20]
Final LinkedList:[Geeks, for, Geeks, 10]

------------------------

The Java.util.LinkedList.remove(Object O) method is used to remove any particular element from the linked list.

Syntax:

LinkedList.remove(Object O)

Parameters: The parameter O is of the object type of linked list and specifies the element to be removed from the list.

LinkedList<String> list = new LinkedList<String>();
  
        // Use add() method to add elements in the list
        list.add("Geeks");
        list.add("for");
        list.add("Geeks");
        list.add("10");
        list.add("20");
  
        // Output the list
        System.out.println("LinkedList:" + list);
  
        // Remove the head using remove()
        list.remove("Geeks");
        list.remove("20");
  
        // Print the final list
        System.out.println("Final LinkedList:" + list);
    }
}
Output:

LinkedList:[Geeks, for, Geeks, 10, 20]
Final LinkedList:[for, Geeks, 10]
----------------

import java.util.*;

public class MyClass {
    
   public class MyClass {
    
    public static void main(String args[]) {
       ArrayList listing = new ArrayList<String>();
       listing.add("shan");
       listing.add("shan1");
       listing.add(0,"shan2");  //it will add element at 0 index and pushes all the elements to the right
        listing.add("shan1");
        listing.add("shan1");
         listing.set(0,"shan1"); //it will replace the element at 0 index.
        
        
       Iterator itr = listing.iterator();
       while(itr.hasNext())
       {
          System.out.println(itr.next()+" ") ;
       }
       
       System.out.println("----------------") ;
       
       listing.remove("shan1");
       
       Iterator itr1 = listing.iterator();
       while(itr1.hasNext())
       {
          System.out.println(itr1.next()+" ") ;
       }
    }
    
     
}

shan2 
shan 
shan1 
shan1 
shan1 
----------------
shan2 
shan 
shan1   //remove with object will remove only first instance of object not all the objects
shan1 



shan1  
shan 
shan1 
shan1 
shan1 
----------------
shan 
shan1 
shan1 
shan1 
-----------------------------------


Operation 1: Adding Elements

In order to add an element to an ArrayList, we can use the add() method. This method is overloaded to perform multiple operations based on different parameters. They are as follows:  

    add(Object): This method is used to add an element at the end of the ArrayList.
    add(int index, Object): This method is used to add an element at a specific index in the ArrayList.
	
	Operation 2: Changing Elements

After adding the elements, if we wish to change the element, it can be done using the set() method. Since an ArrayList is indexed, the element which we wish to change is referenced by the index of the element. Therefore, this method takes an index and the updated element which needs to be inserted at that index. 

Example